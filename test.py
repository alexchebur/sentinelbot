# test.py

import os
import random
import xml.etree.ElementTree as ET
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ApplicationHandlerStop

class QuizHandler:
    def __init__(self):
        self.questions = self._load_questions()
        self.rank_titles = {0: "–ù–æ–≤–∏—á–æ–∫", 3: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", 6: "–≠–∫—Å–ø–µ—Ä—Ç", 9: "–ú–∞—Å—Ç–µ—Ä –∫–æ–º–ø–ª–∞–µ–Ω—Å–∞"}

    def _load_questions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ XML"""
        XML_PATH = "/data/qa_quiz.xml"  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ app.py
        if not os.path.exists(XML_PATH):
            raise FileNotFoundError(f"–§–∞–π–ª {XML_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        tree = ET.parse(XML_PATH)
        root = tree.getroot()
        
        questions = []
        for question_elem in root.findall('question'):
            question_text = question_elem.find('text').text
            answers = []
            correct_idx = 0
            for idx, answer_elem in enumerate(question_elem.findall('answer')):
                answers.append(answer_elem.text)
                if answer_elem.get('correct') == 'true':
                    correct_idx = idx
            questions.append({
                'text': question_text,
                'answers': answers,
                'correct': correct_idx
            })
        return questions

    async def start_quiz(self, update: Update, context: CallbackContext):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_quiz"""
        user_id = update.effective_user.id
        context.user_data[user_id] = {
            'current_question': 0,
            'score': 0,
            'quiz_questions': random.sample(self.questions, 10)
        }
        await self._send_question(update, context)  # –î–æ–±–∞–≤–ª–µ–Ω await
        
    async def _send_question(self, update: Update, context: CallbackContext):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        user_id = update.effective_user.id
        data = context.user_data[user_id]
        question = data['quiz_questions'][data['current_question']]

        keyboard = [
            [InlineKeyboardButton(answer, callback_data=str(idx)) 
            for idx, answer in enumerate(question['answers'])]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üìù *–í–æ–ø—Ä–æ—Å {data['current_question'] + 1}/10:*\n\n{question['text']}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    async def handle_answer(self, update: Update, context: CallbackContext):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π await –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
        
        user_id = query.from_user.id
        data = context.user_data.get(user_id)
        if not data or data['current_question'] >= 10:
            return

        selected_answer = int(query.data)
        question = data['quiz_questions'][data['current_question']]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if selected_answer == question['correct']:
            data['score'] += 1

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        data['current_question'] += 1
        query.answer()

        if data['current_question'] < 10:
            await self._send_question(update, context)  # –î–æ–±–∞–≤–ª–µ–Ω await
        else:
            await self._finish_quiz(update, context)    # –î–æ–±–∞–≤–ª–µ–Ω await

    async def _finish_quiz(self, update: Update, context: CallbackContext):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
        user_id = update.effective_user.id
        data = context.user_data[user_id]
        score = data['score']
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è
        rank = "–ù–æ–≤–∏—á–æ–∫"
        for key in sorted(self.rank_titles.keys(), reverse=True):
            if score >= key:
                rank = self.rank_titles[key]
                break

        await context.bot.send_message(  # –î–æ–±–∞–≤–ª–µ–Ω await
            chat_id=update.effective_chat.id,
            text=f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/10\n–í–∞—à–µ –∑–≤–∞–Ω–∏–µ: {rank}"
        )
        del context.user_data[user_id]

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ –±–æ—Ç–∞:
# from test import QuizHandler
# quiz_handler = QuizHandler()
# 
# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
# application.add_handler(CommandHandler('start_quiz', quiz_handler.start_quiz))
# application.add_handler(CallbackQueryHandler(quiz_handler.handle_answer))
