import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

PASSWORD = "SECRET123"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
MAX_ATTEMPTS = 3        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
pending_verification = {}

async def delete_message_safe(chat_id: int, message_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await context.bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    try:
        await update.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        for user in update.message.new_chat_members:
            if user.is_bot:
                continue

            user_id = user.id
            chat_id = update.effective_chat.id
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions = await update.effective_chat.send_message(
                f"üëã {user.mention_markdown()}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥!",
                parse_mode="Markdown"
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            context.job_queue.run_once(
                lambda ctx: delete_message_safe(chat_id, instructions.message_id, ctx),
                15,
                data=instructions.message_id
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            job = context.job_queue.run_once(
                kick_user_callback,
                60,
                data=(chat_id, user_id, instructions.message_id),
                name=f"kick_{user_id}"
            )
            
            pending_verification[user_id] = {
                "chat_id": chat_id,
                "job": job,
                "instructions_msg": instructions.message_id,
                "messages": [],
                "attempts": 0
            }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ welcome_new_member: {e}")

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id
    if user_id not in pending_verification:
        return

    try:
        user_data = pending_verification[user_id]
        user_data["attempts"] += 1
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_message_safe(update.effective_chat.id, update.message.message_id, context)
        user_data["messages"].append(update.message.message_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if update.message.text and update.message.text.strip() == PASSWORD:
            # –£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
            user_data["job"].schedule_removal()
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            await delete_message_safe(user_data["chat_id"], user_data["instructions_msg"], context)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation = await update.effective_chat.send_message(
                f"‚úÖ {update.effective_user.mention_markdown()} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            context.job_queue.run_once(
                lambda ctx: delete_message_safe(confirmation.chat.id, confirmation.message_id, ctx),
                10,
                data=confirmation.message_id
            )
            
            del pending_verification[user_id]
        elif user_data["attempts"] >= MAX_ATTEMPTS:
            # –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            await execute_kick(user_id, context, reason="–∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏")
        else:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
            warning = await update.effective_chat.send_message(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {MAX_ATTEMPTS - user_data['attempts']}"
            )
            context.job_queue.run_once(
                lambda ctx: delete_message_safe(warning.chat.id, warning.message_id, ctx),
                5,
                data=warning.message_id
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_message: {e}")

async def kick_user_callback(context: ContextTypes.DEFAULT_TYPE):
    """–ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É"""
    job = context.job
    chat_id, user_id, instructions_msg = job.data
    
    if user_id in pending_verification:
        await execute_kick(user_id, context, reason="—Ç–∞–π–º–∞—É—Ç")

async def execute_kick(user_id: int, context: ContextTypes.DEFAULT_TYPE, reason: str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = pending_verification.get(user_id)
        if not user_data:
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg_id in user_data["messages"]:
            await delete_message_safe(user_data["chat_id"], msg_id, context)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await delete_message_safe(user_data["chat_id"], user_data["instructions_msg"], context)
        
        # –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.ban_chat_member(
            chat_id=user_data["chat_id"],
            user_id=user_id,
            until_date=datetime.now() + timedelta(seconds=30)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∏–∫–µ
        notification = await context.bot.send_message(
            user_data["chat_id"],
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω ({reason})"
        )
        context.job_queue.run_once(
            lambda ctx: delete_message_safe(notification.chat.id, notification.message_id, ctx),
            10,
            data=notification.message_id
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        if user_id in pending_verification:
            del pending_verification[user_id]

def main():
    application = Application.builder().token("7931308034:AAGoN08BoCi4eQl7fI-KFbgIvMYRwsVITAE").build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(
        MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member)
    )
    application.add_handler(
        MessageHandler(filters.ALL & ~filters.COMMAND, handle_user_message)
    )
    
    application.run_polling()

if __name__ == "__main__":
    main()
