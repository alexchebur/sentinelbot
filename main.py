import logging
import asyncio
from datetime import datetime, timedelta
from functools import partial
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
    CommandHandler
)
from telegram.error import RetryAfter

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

PASSWORD = "123"
MAX_ATTEMPTS = 1
pending_verification = {}

async def debug_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É"""
    try:
        await context.bot.send_message(
            chat_id,
            f"üîß [DEBUG] {datetime.now().strftime('%H:%M:%S')}: {text}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

async def delete_message_safe(chat_id: int, message_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø—É"""
    try:
        await context.bot.delete_message(chat_id, message_id)
        await debug_message(context, chat_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {message_id}: {str(e)}"
        await debug_message(context, chat_id, error_text)
        logger.error(error_text)

async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    chat_id = update.effective_chat.id
    try:
        await debug_message(context, chat_id, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
        bot_member = await context.bot.get_chat_member(chat_id, context.bot.id)
        if not (bot_member.can_restrict_members and bot_member.can_delete_messages):
            await debug_message(context, chat_id, "‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ/–±–∞–Ω!")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.delete()
        await debug_message(context, chat_id, "–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")

        for user in update.message.new_chat_members:
            if user.is_bot:
                continue

            user_id = user.id
            await debug_message(context, chat_id, f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ @{user.username} (ID: {user_id})")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions = await context.bot.send_message(
                chat_id,
                f"üëã {user.mention_markdown()}, —É –≤–∞—Å 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞!",
                parse_mode="Markdown"
            )
            
            # –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            context.job_queue.run_once(
                partial(delete_message_safe, chat_id, instructions.message_id),
                15,
                name=f"del_instr_{user_id}"
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∏–∫
            job = context.job_queue.run_once(
                partial(kick_user_callback, user_id=user_id),
                60,
                data=(chat_id, user_id, instructions.message_id),
                name=f"kick_{user_id}"
            )
            
            pending_verification[user_id] = {
                "chat_id": chat_id,
                "job": job,
                "instructions_msg": instructions.message_id,
                "messages": [],
                "attempts": 0
            }
            await debug_message(context, chat_id, f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫–∏–∫ @{user.username} –≤ {datetime.now() + timedelta(seconds=60)}")

    except Exception as e:
        error_text = f"üö® –û–®–ò–ë–ö–ê: {str(e)}"
        await debug_message(context, chat_id, error_text)
        logger.error(error_text)

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    try:
        if user_id not in pending_verification:
            await debug_message(context, chat_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.effective_user.username} (–Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏)")
            return

        user_data = pending_verification[user_id]
        user_data["attempts"] += 1
        await debug_message(context, chat_id, f"–ü–æ–ø—ã—Ç–∫–∞ {user_data['attempts']} –æ—Ç @{update.effective_user.username}")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_message_safe(chat_id, update.message.message_id, context)
        user_data["messages"].append(update.message.message_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if update.message.text and update.message.text.strip() == PASSWORD:
            await debug_message(context, chat_id, f"‚úÖ @{update.effective_user.username} –≤–≤–µ–ª –≤–µ—Ä–Ω—ã–π –∫–æ–¥!")
            user_data["job"].schedule_removal()
            await delete_message_safe(chat_id, user_data["instructions_msg"], context)
            
            confirmation = await context.bot.send_message(
                chat_id,
                f"{update.effective_user.mention_markdown()} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            
            del pending_verification[user_id]
            return

        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫
        if user_data["attempts"] >= MAX_ATTEMPTS:
            await debug_message(context, chat_id, f"üî• @{update.effective_user.username} –∏—Å—á–µ—Ä–ø–∞–ª –ø–æ–ø—ã—Ç–∫–∏!")
            await execute_kick(user_id, context, "–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
            return

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        warning = await context.bot.send_message(
            chat_id,
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {MAX_ATTEMPTS - user_data['attempts']}"
        )
        context.job_queue.run_once(
            partial(delete_message_safe, chat_id, warning.message_id),
            5,
            name=f"del_warn_{user_id}"
        )

    except Exception as e:
        error_text = f"üö® –û–®–ò–ë–ö–ê: {str(e)}"
        await debug_message(context, chat_id, error_text)
        logger.error(error_text)

async def kick_user_callback(context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞"""
    job = context.job
    chat_id, user_id, instr_msg = job.data
    await debug_message(context, chat_id, f"‚è∞ –¢–∞–π–º–∞—É—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await execute_kick(user_id, context, "—Ç–∞–π–º–∞—É—Ç")

async def execute_kick(user_id: int, context: ContextTypes.DEFAULT_TYPE, reason: str):
    """–ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = pending_verification.pop(user_id, None)
        if not user_data:
            await debug_message(context, "unknown", f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —É–¥–∞–ª–µ–Ω")
            return

        chat_id = user_data["chat_id"]
        await debug_message(context, chat_id, f"üõë –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–∏–∫–∞ ({reason})...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            member = await context.bot.get_chat_member(chat_id, user_id)
            if member.status in ["creator", "administrator"]:
                await debug_message(context, chat_id, "‚õî –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return
        except Exception as e:
            await debug_message(context, chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        await debug_message(context, chat_id, f"üßπ –£–¥–∞–ª–µ–Ω–∏–µ {len(user_data['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        for msg_id in user_data["messages"]:
            await delete_message_safe(chat_id, msg_id, context)

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await delete_message_safe(chat_id, user_data["instructions_msg"], context)

        # –ë–∞–Ω
        try:
            await context.bot.ban_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                until_date=datetime.now() + timedelta(seconds=30)
            )
            await debug_message(context, chat_id, f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 30 —Å–µ–∫")
        except RetryAfter as e:
            await debug_message(context, chat_id, f"‚è≥ –û–∂–∏–¥–∞–µ–º {e.retry_after} —Å–µ–∫...")
            await asyncio.sleep(e.retry_after)
            await execute_kick(user_id, context, reason)
            return
        except Exception as e:
            await debug_message(context, chat_id, f"üö® –û—à–∏–±–∫–∞ –±–∞–Ω–∞: {str(e)}")
            return

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = await context.bot.send_message(
            chat_id,
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω ({reason})"
        )
        context.job_queue.run_once(
            partial(delete_message_safe, chat_id, notification.message_id),
            10,
            name=f"del_notif_{user_id}"
        )

    except Exception as e:
        error_text = f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}"
        await debug_message(context, chat_id, error_text)
        logger.error(error_text)

async def check_rights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞"""
    chat_id = update.effective_chat.id
    bot_member = await context.bot.get_chat_member(chat_id, context.bot.id)
    await update.message.reply_text(
        f"üîê –ü—Ä–∞–≤–∞ –±–æ—Ç–∞:\n"
        f"‚Ä¢ –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if bot_member.can_delete_messages else '‚ùå'}\n"
        f"‚Ä¢ –ë–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ' if bot_member.can_restrict_members else '‚ùå'}"
    )

def main():
    application = Application.builder().token("YOUR_BOT_TOKEN").build()
    application.add_handler(CommandHandler("check_rights", check_rights))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_user_message))
    application.run_polling()

if __name__ == "__main__":
    main()
