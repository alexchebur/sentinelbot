
import os
import faiss
import numpy as np
import aiohttp
import pickle
import logging
import asyncio
import re
import time
import xml.etree.ElementTree as ET
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
    AIORateLimiter,
    JobQueue
)
from typing import List, Dict, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
VENDOR_API_KEY = "sk-or-vv-a8d6e009e2bbe09474b0679fbba83b015ff1c4f255ed76f33b48ccb1632bdc32"
INDEX_PATH = "/data/faiss_index.bin"
METADATA_PATH = "/data/metadata.pkl"
QA_PAIRS_PATH = "/data/qa_pairs.xml"
MODEL_ID = "google/gemini-flash-1.5"
API_URL = "https://api.vsegpt.ru/v1/chat/completions"
EMBEDDING_URL = "https://api.vsegpt.ru/v1/embeddings"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_CONTEXT_TOKENS = 7000
MAX_RESPONSE_LENGTH = 10000
REQUEST_DELAY = 12
MAX_RETRIES = 3
USER_RATE_LIMIT = 8
BROADCAST_INTERVAL = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BROADCAST_INITIAL_DELAY = 10  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

SYSTEM_PROMPT = """–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç—ã. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ,
–∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –∏ –¥–µ–ª–∞—è –æ–≥–æ–≤–æ—Ä–∫—É: "—Å–æ–≥–ª–∞—Å–Ω–æ –∏–º–µ—é—â–µ–π—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏". 
- –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
- –î–µ–ª–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–º–µ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º
- –ó–∞–ø—Ä–µ—â–µ–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, txt –∏–ª–∏ doc)"""

class AnticorruptionBot:
    def __init__(self, token: str):
        self.bot = Bot(token)
        self.index, self.metadata = self._load_faiss_index()
        self.qa_pairs = self._load_qa_pairs()
        self.session: Optional[aiohttp.ClientSession] = None
        self.rate_limits: Dict[int, List[float]] = {}
        self.bot_info = None
        self.active_chats: set[int] = set()
        self.broadcast_lock = asyncio.Lock()

    def _load_faiss_index(self) -> tuple:
        if not all(os.path.exists(p) for p in [INDEX_PATH, METADATA_PATH]):
            raise FileNotFoundError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –∏–Ω–¥–µ–∫—Å–∞")
        
        index = faiss.read_index(INDEX_PATH)
        with open(METADATA_PATH, "rb") as f:
            metadata = pickle.load(f)
        
        return index, metadata

    def _load_qa_pairs(self) -> List[Dict[str, str]]:
        if not os.path.exists(QA_PAIRS_PATH):
            raise FileNotFoundError(f"–§–∞–π–ª QA –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {QA_PAIRS_PATH}")
        
        try:
            tree = ET.parse(QA_PAIRS_PATH)
            root = tree.getroot()
            return [
                {
                    "question": pair.find("question").text.strip(),
                    "answer": pair.find("answer").text.strip()
                }
                for pair in root.findall("pair")
                if pair.find("question") is not None and pair.find("answer") is not None
            ]
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ QA –ø–∞—Ä: {str(e)}")

    async def initialize(self):
        self.session = aiohttp.ClientSession()
        self.bot_info = await self.bot.get_me()
        logging.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{self.bot_info.username}")

    async def _track_chat(self, chat_id: int):
        self.active_chats.add(chat_id)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._track_chat(update.effective_chat.id)
        
        if self.session is None or self.session.closed or self.bot_info is None:
            await self.initialize()
        
        is_private = update.effective_chat.type == "private"
        
        if not is_private:
            message_text = update.message.text
            bot_username = self.bot_info.username
            
            mention_pattern = rf'@?{re.escape(bot_username)}\b'
            if not re.search(mention_pattern, message_text, re.IGNORECASE):
                return
            
            message_text = re.sub(mention_pattern, '', message_text, flags=re.IGNORECASE).strip()
            
            if not message_text:
                await self._safe_send(update, "–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?")
                return
                
            update.message.text = message_text

        user_id = update.effective_user.id
        if not self._check_rate_limit(user_id):
            await self._safe_send(update, "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
            return

        try:
            query = update.message.text.strip()
            if not query:
                return

            chunks = await self._search_chunks(query)
            if not chunks:
                await self._safe_send(update, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                return
                
            await asyncio.sleep(REQUEST_DELAY)

            answer = await self._generate_response(query, chunks)
            
            if not is_private:
                user_name = update.effective_user.first_name
                answer = f"{user_name}, {answer}"
                
            await self._safe_send(update, answer)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)
            await self._safe_send(update, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._track_chat(update.effective_chat.id)
        await self._safe_send(update, "–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.")

    def _check_rate_limit(self, user_id: int) -> bool:
        now = time.time()
        if user_id not in self.rate_limits:
            self.rate_limits[user_id] = []
        
        timestamps = [ts for ts in self.rate_limits[user_id] if now - ts < 60]
        if len(timestamps) >= USER_RATE_LIMIT:
            return False
        
        self.rate_limits[user_id] = timestamps + [now]
        return True

    async def _search_chunks(self, query: str) -> List[str]:
        embedding = await self._get_embedding(query)
        distances, indices = self.index.search(np.array([embedding]), 5)
        
        results = []
        for idx in indices[0]:
            if idx < len(self.metadata):
                text = self.metadata[idx].get("text", "")
                if text:
                    results.append(text[:1000])
        return results

    async def _get_embedding(self, text: str) -> List[float]:
        headers = {
            "Authorization": f"Bearer {VENDOR_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "text-embedding-3-small",
            "input": text
        }

        async with self.session.post(EMBEDDING_URL, json=payload, headers=headers) as response:
            response.raise_for_status()
            data = await response.json()
            return data['data'][0]['embedding']

    async def _generate_response(self, query: str, chunks: List[str]) -> str:
        headers = {
            "Authorization": f"Bearer {VENDOR_API_KEY}",
            "Content-Type": "application/json"
        }
        
        context = "\n".join([f"[–ü—É–Ω–∫—Ç {i+1}] {chunk}" for i, chunk in enumerate(chunks)])
        prompt = f"–í–æ–ø—Ä–æ—Å: {query}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"

        payload = {
            "model": MODEL_ID,
            "messages": [
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": MAX_RESPONSE_LENGTH
        }

        async with self.session.post(API_URL, json=payload, headers=headers) as response:
            response_data = await response.json()
            raw_answer = response_data['choices'][0]['message']['content']
            return self._clean_markdown(raw_answer)

    def _clean_markdown(self, text: str) -> str:
        markdown_patterns = [
            r'\*\*(.*?)\*\*',    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            r'\*(.*?)\*',         # –ö—É—Ä—Å–∏–≤
            r'~~(.*?)~~',         # –ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
            r'\[(.*?)\]\(.*?\)',  # –°—Å—ã–ª–∫–∏
            r'`{3}.*?\n',         # –ë–ª–æ–∫–∏ –∫–æ–¥–∞
            r'`',                 # –ò–Ω–ª–∞–π–Ω –∫–æ–¥
            r'^#+\s*',           # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        ]

        for pattern in markdown_patterns:
            text = re.sub(pattern, r'\1', text, flags=re.MULTILINE|re.DOTALL)
        
        return text.strip()

    async def _safe_send(self, update: Update, text: str):
        try:
            await update.message.reply_text(text[:MAX_RESPONSE_LENGTH])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    async def broadcast_random_qa(self, context: ContextTypes.DEFAULT_TYPE):
        if not self.qa_pairs:
            logging.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö QA –ø–∞—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        async with self.broadcast_lock:
            pair = np.random.choice(self.qa_pairs)
            message = f"‚ùì –í–æ–ø—Ä–æ—Å –¥–Ω—è:\n{pair['question']}\n\nüí° –û—Ç–≤–µ—Ç:\n{pair['answer']}"

            errors = []
            for chat_id in list(self.active_chats):
                try:
                    await self.bot.send_message(chat_id=chat_id, text=message)
                    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                except Exception as e:
                    errors.append((chat_id, str(e)))
                    logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç {chat_id}: {str(e)}")

            if errors:
                error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:\n" + "\n".join(
                    f"–ß–∞—Ç {cid}: {err}" for cid, err in errors[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö –æ—à–∏–±–æ–∫
                )
                if len(errors) > 5:
                    error_msg += f"\n...–∏ –µ—â—ë {len(errors) - 5} –æ—à–∏–±–æ–∫"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥–º–∏–Ω—É)
                if self.active_chats:
                    await self._safe_send_to_chat(next(iter(self.active_chats)), error_msg[:4000])

    async def _safe_send_to_chat(self, chat_id: int, text: str):
        try:
            await self.bot.send_message(chat_id=chat_id, text=text[:MAX_RESPONSE_LENGTH])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")

    async def shutdown(self):
        if self.session:
            await self.session.close()

async def startup(application):
    bot_instance = application.bot_data.get("bot_instance")
    if bot_instance:
        await bot_instance.initialize()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        application.job_queue.run_repeating(
            bot_instance.broadcast_random_qa,
            interval=BROADCAST_INTERVAL,
            first=BROADCAST_INITIAL_DELAY
        )

async def shutdown(application):
    bot_instance = application.bot_data.get("bot_instance")
    if bot_instance:
        await bot_instance.shutdown()

def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    application = ApplicationBuilder() \
        .token(TOKEN) \
        .rate_limiter(AIORateLimiter(
            overall_max_rate=40,
            overall_time_period=60
        )) \
        .job_queue(JobQueue()) \
        .build()

    bot = AnticorruptionBot(TOKEN)
    application.bot_data["bot_instance"] = bot
    
    application.add_handler(CommandHandler("start", bot.handle_start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    application.post_init = startup
    application.post_shutdown = shutdown
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
