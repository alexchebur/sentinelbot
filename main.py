import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

PASSWORD = "123"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
pending_verification = {}

async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    for user in update.message.new_chat_members:
        if user.is_bot:
            continue
        
        user_id = user.id
        chat_id = update.effective_chat.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.effective_chat.send_message(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}! –£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —á–∞—Ç."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        job = context.job_queue.run_once(
            kick_user_callback, 
            60, 
            data=(chat_id, user_id),
            name=str(user_id)
        )
        
        pending_verification[user_id] = {
            "job": job,
            "chat_id": chat_id
        }

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if user_id not in pending_verification:
        return
    
    if update.message.text.strip() == PASSWORD:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        job = pending_verification[user_id]["job"]
        job.schedule_removal()
        del pending_verification[user_id]
        
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É!")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")

async def kick_user_callback(context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–ª–ª–±—ç–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    job = context.job
    chat_id, user_id = job.data
    
    if user_id not in pending_verification:
        return
    
    try:
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏ —Å—Ä–∞–∑—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.ban_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            until_date=datetime.now() + timedelta(seconds=30)
        
        await context.bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        if user_id in pending_verification:
            del pending_verification[user_id]

def main():
    application = Application.builder().token("7931308034:AAGoN08BoCi4eQl7fI-KFbgIvMYRwsVITAE").build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(
        MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member)
    )
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    
    application.run_polling()

if __name__ == "__main__":
    main()
