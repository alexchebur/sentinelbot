import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

PASSWORD = "SECRET123"
pending_verification = {}

async def delete_user_message(update: Update):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ"""
    try:
        await update.message.delete()
        logger.info(f"Deleted message from {update.effective_user.id}")
    except Exception as e:
        logger.error(f"Failed to delete message: {e}")

async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ
        await update.message.delete()
        
        for user in update.message.new_chat_members:
            if user.is_bot:
                continue
            
            user_id = user.id
            chat_id = update.effective_chat.id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –õ–°
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –≥—Ä—É–ø–ø—É –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°: {e}")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg = await update.effective_chat.send_message(
                    f"üîí {user.mention_markdown()}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –õ–° –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π!"
                )
                context.job_queue.run_once(
                    lambda ctx: msg.delete(), 
                    10, 
                    data=msg.id
                )

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            job = context.job_queue.run_once(
                kick_user_callback, 
                60, 
                data=(chat_id, user_id),
                name=f"kick_job_{user_id}"
            )
            
            pending_verification[user_id] = {
                "job": job,
                "chat_id": chat_id,
                "messages": []
            }

    except Exception as e:
        logger.error(f"Error in welcome_new_member: {e}")

async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    if user_id not in pending_verification:
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        await delete_user_message(update)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        pending_verification[user_id]["messages"].append(update.message.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message.text:
            text = update.message.text.strip()
            if text == PASSWORD:
                # –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                job = pending_verification[user_id]["job"]
                job.schedule_removal()
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                chat_id = pending_verification[user_id]["chat_id"]
                for msg_id in pending_verification[user_id]["messages"]:
                    try:
                        await context.bot.delete_message(chat_id, msg_id)
                    except Exception as e:
                        logger.error(f"Failed to delete message {msg_id}: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                msg = await update.effective_chat.send_message(
                    f"‚úÖ {update.effective_user.mention_markdown()} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!"
                )
                context.job_queue.run_once(
                    lambda ctx: msg.delete(),
                    10,
                    data=msg.id
                )
                
                del pending_verification[user_id]
                
    except Exception as e:
        logger.error(f"Error in handle_all_messages: {e}")

async def kick_user_callback(context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–ª–ª–±—ç–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        job = context.job
        chat_id, user_id = job.data
        
        if user_id not in pending_verification:
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for msg_id in pending_verification[user_id]["messages"]:
            try:
                await context.bot.delete_message(chat_id, msg_id)
            except Exception as e:
                logger.error(f"Failed to delete message {msg_id}: {e}")
        
        # –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.ban_chat_member(  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
            chat_id=chat_id,
            user_id=user_id,
            until_date=datetime.now() + timedelta(seconds=30)
        )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –∑–¥–µ—Å—å
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ä–∞–∑–±–∞–Ω–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è
        # await context.bot.unban_chat_member(chat_id, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text=f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!"
        )
        context.job_queue.run_once(
            lambda ctx: msg.delete(),
            10,
            data=msg.id
        )
        
    except Exception as e:
        logger.error(f"Error in kick_user_callback: {e}")
    finally:
        if user_id in pending_verification:
            del pending_verification[user_id]
def main():
    application = Application.builder().token("7931308034:AAGoN08BoCi4eQl7fI-KFbgIvMYRwsVITAE").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(
        MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member)
    )
    application.add_handler(
        MessageHandler(filters.ALL & ~filters.COMMAND, handle_all_messages)
    )
    
    application.run_polling()

if __name__ == "__main__":
    main()
