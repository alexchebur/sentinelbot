import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG,  # –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    filename='bot.log'
)
logger = logging.getLogger(__name__)

PASSWORD = "SECRET123"
MAX_ATTEMPTS = 1
pending_verification = {}

async def delete_message_safe(chat_id: int, message_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await context.bot.delete_message(chat_id, message_id)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        logger.debug("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        await update.message.delete()
        
        for user in update.message.new_chat_members:
            if user.is_bot:
                continue

            user_id = user.id
            chat_id = update.effective_chat.id
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions = await update.effective_chat.send_message(
                f"üëã {user.mention_markdown()}, —É –≤–∞—Å 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞!",
                parse_mode="Markdown"
            )
            logger.debug(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {instructions.message_id}")
            
            # –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            context.job_queue.run_once(
                lambda ctx: delete_message_safe(chat_id, instructions.message_id, ctx),
                15,
                name=f"del_instr_{user_id}"
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∏–∫
            job = context.job_queue.run_once(
                kick_user_callback,
                60,
                data=(chat_id, user_id, instructions.message_id),
                name=f"kick_{user_id}"
            )
            
            pending_verification[user_id] = {
                "chat_id": chat_id,
                "job": job,
                "instructions_msg": instructions.message_id,
                "messages": [],
                "attempts": 0
            }
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ welcome_new_member: {e}")

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
    
    if user_id not in pending_verification:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return

    try:
        user_data = pending_verification[user_id]
        user_data["attempts"] += 1
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {user_data['attempts']}/{MAX_ATTEMPTS}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_message_safe(update.effective_chat.id, update.message.message_id, context)
        user_data["messages"].append(update.message.message_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if update.message.text and update.message.text.strip() == PASSWORD:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            user_data["job"].schedule_removal()
            await delete_message_safe(user_data["chat_id"], user_data["instructions_msg"], context)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation = await update.effective_chat.send_message(
                f"‚úÖ {update.effective_user.mention_markdown()} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!",
                parse_mode="Markdown"
            )
            context.job_queue.run_once(
                lambda ctx: delete_message_safe(confirmation.chat.id, confirmation.message_id, ctx),
                10,
                name=f"del_conf_{user_id}"
            )
            
            del pending_verification[user_id]
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
        if user_data["attempts"] >= MAX_ATTEMPTS:
            logger.info(f"–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è {user_id}")
            await execute_kick(user_id, context, "–∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏")
            return

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        warning = await update.effective_chat.send_message(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {MAX_ATTEMPTS - user_data['attempts']}"
        )
        context.job_queue.run_once(
            lambda ctx: delete_message_safe(warning.chat.id, warning.message_id, ctx),
            5,
            name=f"del_warn_{user_id}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_message: {e}")

async def kick_user_callback(context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞"""
    job = context.job
    logger.debug(f"–°—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–µ—Ä –∫–∏–∫–∞: {job.name}")
    chat_id, user_id, instr_msg = job.data
    await execute_kick(user_id, context, "—Ç–∞–π–º–∞—É—Ç")

async def execute_kick(user_id: int, context: ContextTypes.DEFAULT_TYPE, reason: str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∏–∫–∞"""
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∫–∏–∫–∞ {user_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
        
        if user_id not in pending_verification:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_data = pending_verification[user_id]
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg_id in user_data["messages"]:
            await delete_message_safe(user_data["chat_id"], msg_id, context)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await delete_message_safe(user_data["chat_id"], user_data["instructions_msg"], context)
        
        # –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.ban_chat_member(  # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            chat_id=user_data["chat_id"],
            user_id=user_id,
            until_date=datetime.now() + timedelta(seconds=30)
        )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = await context.bot.send_message(
            user_data["chat_id"],
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω ({reason})"
        )
        context.job_queue.run_once(
            lambda ctx: delete_message_safe(notification.chat.id, notification.message_id, ctx),
            10,
            name=f"del_notif_{user_id}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–∏–∫–∞ {user_id}: {e}")
    finally:
        if user_id in pending_verification:
            del pending_verification[user_id]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
def main():
    application = Application.builder().token("7931308034:AAGoN08BoCi4eQl7fI-KFbgIvMYRwsVITAE").build()
    
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_user_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()
